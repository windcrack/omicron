@use 'sass:math';

@mixin button_shadow($color) {
  -webkit-box-shadow: 0px 0px 19px 0px $color;
  -moz-box-shadow: 0px 0px 19px 0px $color;
  box-shadow: 0px 0px 19px 0px $color;
}

$maxWidth: 1920;
$maxWidthContainer: 1300;

@mixin adaptive-value($property, $startSize, $minSize, $type){
  $addSize: $startSize - $minSize;
  @if $type == 1{
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}){
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }
  @else if $type == 2{
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}){
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }
  @else if $type == 3{
    #{$property}: $startSize + '%';
    @media (max-width: #{$maxWidthContainer + px}){
      #{$property}: calc(#{$minSize + '%'} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }
  @else{
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
  }
}

@mixin grid-template-columns($min, $max, $gap: null, $row-gap: null, $column-gap: null) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(#{"min(#{$min}, #{$max})"}, 1fr));

  @if $gap != null and $row-gap == null and $column-gap == null {
    gap: $gap;
  } @else if $row-gap != null and $column-gap != null {
    row-gap: $row-gap;
    column-gap: $column-gap;
  }
}
@mixin grid-template-columns-fix($count, $size, $gap: null, $row-gap: null, $column-gap: null) {
  display: grid;
  grid-template-columns: repeat($count, $size);

  @if $gap != null and $row-gap == null and $column-gap == null {
    gap: $gap;
  } @else if $row-gap != null and $column-gap != null {
    row-gap: $row-gap;
    column-gap: $column-gap;
  }
}

@mixin max-width($width) {
  @media screen and (max-width: rem($width)) {
    @content;
  }
}

@mixin min-width($width) {
  @media screen and (min-width: $width + 1px) {
    @content;
  }
}
@mixin minmax-media($widthMax, $withMin) {
  @media screen and (max-width: $widthMax) and (min-width: $withMin + 1px){
    @content;
  }
}

@mixin block-responsive($selector, $padding-bottom) {
  position: relative;
  padding-bottom: $padding-bottom;

  #{$selector} {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;

    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    @supports (inset: 0) {
      inset: 0;
    }
  }
}
@mixin full-page-block($center: true){
  width: 100vw;
  @if($center){
    margin-inline: calc(-50vw + 50%);
  }
}

@mixin full-page-block-calc($size, $center: true){
  width: calc(100vw - $size);
  @if($center){
    margin-inline: calc(-50vw + 50%);
  }
}

@mixin checkHover{
  @media (hover: hover) {
    &:hover{
      @content;
    }
  }
}

@mixin hideScrollBar(){
  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin centerBlock{
  position: absolute;
  top: 50%;
  left: 50%;

  transform: translate(-50% -50%);

  @supports (translate: -50% -50%) {
    translate: -50% -50%
  }
}

@mixin fluid-text($max: 48, $min: 16) {
  font-size: fluid($max, $min);
}

/** Все просто пишем цифры без приписки px */
@function rem($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16) + rem;
  } @else {
    @error 'Не используйте единицы измерения при работе с функцией rem()! Передавайте аргументом только числа.'
  }
}


@function fluid($max: 100, $min: 10) {
  $maxViewportWidth: 1240; // Ограничивающий контейнер по макету
  $minViewportWidth: 360; // Вписываем значение мобильного макета

  $maxSize: math.div($max, 16);
  $minSize: math.div($min, 16);
  $maxWidth: math.div($maxViewportWidth, 16);
  $minWidth: math.div($minViewportWidth, 16);

  $slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
  $yAxisIntersection: -$minWidth * $slope + $minSize;

  @return clamp(
          #{$minSize * 1rem},
          #{$yAxisIntersection * 1rem} + #{$slope * 100vw},
          #{$maxSize * 1rem}
  );
}